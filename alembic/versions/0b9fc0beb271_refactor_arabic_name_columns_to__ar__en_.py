"""
Refactor Arabic name columns to _ar/_en for neighborhoods, parcels, bus_lines,
riyadh_bus_stations

Revision ID: 0b9fc0beb271
Revises: 52df8e311581
Create Date: 2025-07-09 15:07:45.565723

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import geoalchemy2


# revision identifiers, used by Alembic.
revision: str = "0b9fc0beb271"
down_revision: Union[str, Sequence[str], None] = "52df8e311581"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "bus_lines",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("originar_ar", sa.String(), nullable=True),
        sa.Column("originar_en", sa.String(), nullable=True),
        sa.Column("color", sa.String(), nullable=True),
        sa.Column("type", sa.String(), nullable=True),
        sa.Column("busroute", sa.String(), nullable=True),
        sa.Column("origin", sa.String(), nullable=True),
        sa.Column(
            "geometry",
            geoalchemy2.types.Geometry(
                geometry_type="MULTILINESTRING",
                srid=4326,
                spatial_index=False,
                from_text="ST_GeomFromEWKT",
                name="geometry",
            ),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "neighborhoods",
        sa.Column("neighborhood_id", sa.Integer(), nullable=False),
        sa.Column("neighborh_aname_ar", sa.String(), nullable=True),
        sa.Column("neighborh_aname_en", sa.String(), nullable=True),
        sa.Column("zoning_id", sa.Integer(), nullable=True),
        sa.Column("zoning_color", sa.String(), nullable=True),
        sa.Column("price_of_meter", sa.String(), nullable=True),
        sa.Column("shape_area", sa.String(), nullable=True),
        sa.Column("transaction_price", sa.String(), nullable=True),
        sa.Column("region_id", sa.Integer(), nullable=True),
        sa.Column("province_id", sa.Integer(), nullable=True),
        sa.Column(
            "geometry",
            geoalchemy2.types.Geometry(
                geometry_type="POLYGON",
                srid=4326,
                spatial_index=False,
                from_text="ST_GeomFromEWKT",
                name="geometry",
            ),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("neighborhood_id"),
    )
    op.create_table(
        "neighborhoods_centroids",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("neighborhood_id", sa.Integer(), nullable=True),
        sa.Column("neighborh_aname_ar", sa.String(), nullable=True),
        sa.Column("neighborh_aname_en", sa.String(), nullable=True),
        sa.Column("province_id", sa.Integer(), nullable=True),
        sa.Column(
            "geometry",
            geoalchemy2.types.Geometry(
                geometry_type="POINT",
                srid=4326,
                spatial_index=False,
                from_text="ST_GeomFromEWKT",
                name="geometry",
            ),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "parcel_buildingrules",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("zoning_id", sa.Integer(), nullable=True),
        sa.Column("zoning_color", sa.String(), nullable=True),
        sa.Column("zoning_group", sa.String(), nullable=True),
        sa.Column("landuse", sa.String(), nullable=True),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("coloring", sa.String(), nullable=True),
        sa.Column("coloring_description", sa.String(), nullable=True),
        sa.Column("max_building_coefficient", sa.String(), nullable=True),
        sa.Column("max_building_height", sa.String(), nullable=True),
        sa.Column("max_parcel_coverage", sa.String(), nullable=True),
        sa.Column("max_rule_depth", sa.String(), nullable=True),
        sa.Column("main_streets_setback", sa.String(), nullable=True),
        sa.Column("secondary_streets_setback", sa.String(), nullable=True),
        sa.Column("side_rear_setback", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "parcel_metrics_priceofmeter",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("parcel_objid", sa.String(), nullable=True),
        sa.Column("neighborhood_id", sa.Integer(), nullable=True),
        sa.Column("month", sa.Integer(), nullable=True),
        sa.Column("year", sa.Integer(), nullable=True),
        sa.Column("metrics_type", sa.String(), nullable=True),
        sa.Column("average_price_of_meter", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "parcels",
        sa.Column("parcel_objectid", sa.String(), nullable=False),
        sa.Column("province_id", sa.Integer(), nullable=True),
        sa.Column("landuseagroup", sa.String(), nullable=True),
        sa.Column("subdivision_no", sa.String(), nullable=True),
        sa.Column("shape_area", sa.String(), nullable=True),
        sa.Column("zoning_id", sa.Integer(), nullable=True),
        sa.Column("neighborhaname_ar", sa.String(), nullable=True),
        sa.Column("neighborhaname_en", sa.String(), nullable=True),
        sa.Column("neighborhood_id", sa.Integer(), nullable=True),
        sa.Column("municipality_aname_ar", sa.String(), nullable=True),
        sa.Column("municipality_aname_en", sa.String(), nullable=True),
        sa.Column("parcel_no", sa.String(), nullable=True),
        sa.Column("subdivision_id", sa.String(), nullable=True),
        sa.Column("transaction_price", sa.String(), nullable=True),
        sa.Column("landuseadetailed", sa.String(), nullable=True),
        sa.Column("parcel_id", sa.Integer(), nullable=True),
        sa.Column("price_of_meter", sa.String(), nullable=True),
        sa.Column("zoning_color", sa.String(), nullable=True),
        sa.Column("ruleid", sa.String(), nullable=True),
        sa.Column("block_no", sa.String(), nullable=True),
        sa.Column(
            "geometry",
            geoalchemy2.types.Geometry(
                geometry_type="MULTIPOLYGON",
                srid=4326,
                spatial_index=False,
                from_text="ST_GeomFromEWKT",
                name="geometry",
            ),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("parcel_objectid"),
    )
    op.create_table(
        "parcels_base",
        sa.Column("parcel_objectid", sa.String(), nullable=False),
        sa.Column("province_id", sa.Integer(), nullable=True),
        sa.Column("landuseagroup", sa.String(), nullable=True),
        sa.Column("subdivision_no", sa.String(), nullable=True),
        sa.Column("shape_area", sa.String(), nullable=True),
        sa.Column("zoning_id", sa.Integer(), nullable=True),
        sa.Column("neighborhaname_ar", sa.String(), nullable=True),
        sa.Column("neighborhaname_en", sa.String(), nullable=True),
        sa.Column("neighborhood_id", sa.Integer(), nullable=True),
        sa.Column("municipality_aname_ar", sa.String(), nullable=True),
        sa.Column("municipality_aname_en", sa.String(), nullable=True),
        sa.Column("parcel_no", sa.String(), nullable=True),
        sa.Column("subdivision_id", sa.String(), nullable=True),
        sa.Column("transaction_price", sa.String(), nullable=True),
        sa.Column("landuseadetailed", sa.String(), nullable=True),
        sa.Column("parcel_id", sa.Integer(), nullable=True),
        sa.Column("price_of_meter", sa.String(), nullable=True),
        sa.Column("zoning_color", sa.String(), nullable=True),
        sa.Column("ruleid", sa.String(), nullable=True),
        sa.Column("block_no", sa.String(), nullable=True),
        sa.Column(
            "geometry",
            geoalchemy2.types.Geometry(
                geometry_type="MULTIPOLYGON",
                srid=4326,
                spatial_index=False,
                from_text="ST_GeomFromEWKT",
                name="geometry",
            ),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("parcel_objectid"),
    )
    op.create_table(
        "parcels_centroids",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("parcel_id", sa.Integer(), nullable=True),
        sa.Column("parcel_no", sa.String(), nullable=True),
        sa.Column("neighborhood_id", sa.Integer(), nullable=True),
        sa.Column("province_id", sa.Integer(), nullable=True),
        sa.Column("transactions_count", sa.Integer(), nullable=True),
        sa.Column("transaction_date", sa.String(), nullable=True),
        sa.Column("transaction_price", sa.String(), nullable=True),
        sa.Column("price_of_meter", sa.String(), nullable=True),
        sa.Column(
            "geometry",
            geoalchemy2.types.Geometry(
                geometry_type="POINT",
                srid=4326,
                spatial_index=False,
                from_text="ST_GeomFromEWKT",
                name="geometry",
            ),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "provinces",
        sa.Column("province_id", sa.Integer(), nullable=False),
        sa.Column("province_name", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("province_id"),
    )
    op.create_table(
        "qi_population_metrics",
        sa.Column("grid_id", sa.String(), nullable=False),
        sa.Column("population_density", sa.String(), nullable=True),
        sa.Column("residential_rpi", sa.String(), nullable=True),
        sa.Column("commercial_rpi", sa.String(), nullable=True),
        sa.Column("poi_count", sa.String(), nullable=True),
        sa.Column(
            "geometry",
            geoalchemy2.types.Geometry(
                geometry_type="POLYGON",
                srid=4326,
                spatial_index=False,
                from_text="ST_GeomFromEWKT",
                name="geometry",
            ),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("grid_id"),
    )
    op.create_table(
        "qi_stripes",
        sa.Column("strip_id", sa.String(), nullable=False),
        sa.Column("centroid_longitude", sa.String(), nullable=True),
        sa.Column("centroid_latitude", sa.String(), nullable=True),
        sa.Column(
            "geometry",
            geoalchemy2.types.Geometry(
                geometry_type="POLYGON",
                srid=4326,
                spatial_index=False,
                from_text="ST_GeomFromEWKT",
                name="geometry",
            ),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("strip_id"),
    )
    op.create_table(
        "regions",
        sa.Column("region_id", sa.Integer(), nullable=False),
        sa.Column("region_name", sa.String(), nullable=True),
        sa.Column("province_id", sa.Integer(), nullable=True),
        sa.PrimaryKeyConstraint("region_id"),
    )
    op.create_table(
        "riyadh_bus_stations",
        sa.Column("station_code", sa.String(), nullable=False),
        sa.Column("station_name_ar", sa.String(), nullable=True),
        sa.Column("station_name_en", sa.String(), nullable=True),
        sa.Column("station_long", sa.String(), nullable=True),
        sa.Column("station_lat", sa.String(), nullable=True),
        sa.Column(
            "geometry",
            geoalchemy2.types.Geometry(
                geometry_type="POINT",
                srid=4326,
                spatial_index=False,
                from_text="ST_GeomFromEWKT",
                name="geometry",
            ),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("station_code"),
    )
    op.create_table(
        "subdivisions",
        sa.Column("subdivision_id", sa.Integer(), nullable=False),
        sa.Column("subdivision_no", sa.String(), nullable=True),
        sa.Column("zoning_id", sa.Integer(), nullable=True),
        sa.Column("zoning_color", sa.String(), nullable=True),
        sa.Column("transaction_price", sa.String(), nullable=True),
        sa.Column("price_of_meter", sa.String(), nullable=True),
        sa.Column("shape_area", sa.String(), nullable=True),
        sa.Column("province_id", sa.Integer(), nullable=True),
        sa.Column(
            "geometry",
            geoalchemy2.types.Geometry(
                geometry_type="MULTIPOLYGON",
                srid=4326,
                spatial_index=False,
                from_text="ST_GeomFromEWKT",
                name="geometry",
            ),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("subdivision_id"),
    )
    op.create_table(
        "transactions",
        sa.Column("transaction_number", sa.Integer(), nullable=False),
        sa.Column("transaction_date", sa.String(), nullable=True),
        sa.Column("transaction_price", sa.String(), nullable=True),
        sa.Column("price_of_meter", sa.String(), nullable=True),
        sa.Column("parcel_objectid", sa.String(), nullable=True),
        sa.Column("parcel_id", sa.Integer(), nullable=True),
        sa.Column("parcel_no", sa.String(), nullable=True),
        sa.Column("block_no", sa.String(), nullable=True),
        sa.Column("area", sa.String(), nullable=True),
        sa.Column("zoning_id", sa.Integer(), nullable=True),
        sa.Column("neighborhood_id", sa.Integer(), nullable=True),
        sa.Column("region_id", sa.Integer(), nullable=True),
        sa.Column("province_id", sa.Integer(), nullable=True),
        sa.Column("subdivision_no", sa.String(), nullable=True),
        sa.Column("subdivision_id", sa.String(), nullable=True),
        sa.Column("centroid_x", sa.String(), nullable=True),
        sa.Column("centroid_y", sa.String(), nullable=True),
        sa.Column("metrics_type", sa.String(), nullable=True),
        sa.Column("landuseagroup", sa.String(), nullable=True),
        sa.Column("landuseadetailed", sa.String(), nullable=True),
        sa.Column(
            "geometry",
            geoalchemy2.types.Geometry(
                geometry_type="MULTIPOLYGON",
                srid=4326,
                spatial_index=False,
                from_text="ST_GeomFromEWKT",
                name="geometry",
            ),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("transaction_number"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("transactions")
    op.drop_table("subdivisions")
    op.drop_table("riyadh_bus_stations")
    op.drop_table("regions")
    op.drop_table("qi_stripes")
    op.drop_table("qi_population_metrics")
    op.drop_table("provinces")
    op.drop_table("parcels_centroids")
    op.drop_table("parcels_base")
    op.drop_table("parcels")
    op.drop_table("parcel_metrics_priceofmeter")
    op.drop_table("parcel_buildingrules")
    op.drop_table("neighborhoods_centroids")
    op.drop_table("neighborhoods")
    op.drop_table("bus_lines")
    # ### end Alembic commands ###
